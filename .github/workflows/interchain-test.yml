name: Interchain Test
on:
  repository_dispatch:
    types: [image-pushed]
  workflow_dispatch:
    inputs:
      from_version:
        description: 'Version to upgrade from'
        required: false
        type: string
      to_version:
        description: 'Version to upgrade to (defaults to current branch/tag)'
        required: false
        type: string
      upgrade_name:
        description: 'Name of the upgrade'
        required: false
        type: string

# Least-privilege by default; grant per-job if needed.
permissions:
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Get metadata
        id: get-metadata
        run: |
          set -euo pipefail

          # Validate version-like strings: semver-like, optional leading 'v'
          # Accepts: "1", "1.2", "1.2.3", "v1.2.3", "1.2.3-alpha.1", "v2.0.0-rc1"
          VERSION_RE='^v?[0-9]+(?:\.[0-9]+){0,2}(?:-[A-Za-z0-9._-]+)?$'

          fail_invalid() {
            echo "ERROR: Invalid version value: '$1'" >&2
            echo "Allowed format: MAJOR[.MINOR[.PATCH]] with optional leading 'v' and optional -prerelease (alnum . _ -)." >&2
            exit 1
          }

          validate_or_fail() {
            local val="${1:-}"
            [[ -n "$val" ]] || return 1
            [[ "$val" =~ $VERSION_RE ]] || return 1
            return 0
          }

          if [[ "${{ github.event_name }}" == 'repository_dispatch' ]]; then
            raw_ref="${{ github.event.client_payload.ref_name }}"
            raw_tag="${{ github.event.client_payload.tag_name }}"

            if [[ -n "${raw_tag:-}" ]]; then
              validate_or_fail "${raw_tag}" || fail_invalid "${raw_tag}"
              echo "ref_name=${raw_ref:-}" >> "$GITHUB_OUTPUT"
              echo "tag_name=${raw_tag}" >> "$GITHUB_OUTPUT"
            else
              validate_or_fail "${raw_ref}" || fail_invalid "${raw_ref}"
              echo "ref_name=${raw_ref}" >> "$GITHUB_OUTPUT"
              echo "tag_name=${raw_ref}" >> "$GITHUB_OUTPUT"
            fi
          else
            # workflow_dispatch/manual
            raw_ref="${{ github.ref_name }}"
            raw_to_version="${{ inputs.to_version }}"

            if [[ -n "${raw_to_version:-}" ]]; then
              validate_or_fail "${raw_to_version}" || fail_invalid "${raw_to_version}"
              chosen="${raw_to_version}"
            else
              validate_or_fail "${raw_ref}" || fail_invalid "${raw_ref}"
              chosen="${raw_ref}"
            fi

            echo "ref_name=${raw_ref}" >> "$GITHUB_OUTPUT"
            echo "tag_name=${chosen}" >> "$GITHUB_OUTPUT"
          fi

      - name: Check out repository code
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.get-metadata.outputs.ref_name }}

      - name: Setup go
        uses: actions/setup-go@v5

      - name: Prepare matrix
        id: generate-matrix
        env:
          FROM_VERSION: ${{ inputs.from_version }}
          UPGRADE_NAME: ${{ inputs.upgrade_name }}
          TAG_NAME: ${{ steps.get-metadata.outputs.tag_name }}
        run: |
          set -euo pipefail
          cd ./tests/interchain

          # Debug info
          echo "Using FROM_VERSION=${FROM_VERSION:-auto}"
          echo "Using UPGRADE_NAME=${UPGRADE_NAME:-auto}"
          echo "Using TAG_NAME=${TAG_NAME:-(none)}"

          matrix_json="$(go run ./matrix_tool/main.go "$TAG_NAME")"
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      ref_name: ${{ steps.get-metadata.outputs.ref_name }}

  test:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    name: "${{ matrix.previous_version }} -> ${{ matrix.test_version }} test ${{ matrix.test_name }}"
    strategy:
      matrix:
        ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
      max-parallel: 10
    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.prepare-matrix.outputs.ref_name }}

      - name: Setup go
        uses: actions/setup-go@v5

      - name: Run test
        env:
          TEST_DOCKER_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
          TEST_OLD_GAIA_IMAGE_VERSION: "${{ matrix.previous_version }}"
          TEST_NEW_GAIA_IMAGE_VERSION: "${{ matrix.test_version }}"
          TEST_UPGRADE_NAME: "${{ matrix.upgrade_name }}"
        run: |
          set -euo pipefail
          cd ./tests/interchain
          go install github.com/mfridman/tparse@latest
          set -o pipefail
          # Quote matrix.test_name to prevent word-splitting
          go test -v ./... -failfast -p 1 -timeout 5h -run="^${{ matrix.test_name }}" -json | tee "../../output-${{ matrix.previous_version }}-${{ matrix.test_name }}.json" | tparse -follow -all

      - name: Upload output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: output-${{ matrix.previous_version }}-${{ matrix.test_name }}
          path: output-${{ matrix.previous_version }}-${{ matrix.test_name }}.json

  test-report:
    needs: [test, prepare-matrix]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./outputs

      - name: Setup go
        uses: actions/setup-go@v5

      - name: Prep report
        env:
          TEST_MATRIX: ${{ needs.prepare-matrix.outputs.matrix }}
        run: |
          set -euo pipefail
          go install github.com/becheran/go-testreport@latest

          TEST_VERSION="$(echo "$TEST_MATRIX" | jq -r '.test_version[0]')"
          UPGRADE_NAME="$(echo "$TEST_MATRIX" | jq -r '.upgrade_name[0]')"

          echo "$TEST_MATRIX" | jq -r '.previous_version[]' | while read -r PREV_VERSION; do
            cat ./outputs/output-"${PREV_VERSION}"-*/*.json > "combined-${PREV_VERSION}.json"
            go-testreport -vars="Title:${PREV_VERSION} -> ${UPGRADE_NAME} (${TEST_VERSION})" -output="test-report-${PREV_VERSION}.md" -input="combined-${PREV_VERSION}.json" || true
            echo '' >> "test-report-${PREV_VERSION}.md"
          done

          cat test-report-*.md > test-report.md
          cat test-report.md > "$GITHUB_STEP_SUMMARY"

      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
